name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: bestpgindighi-in
  CLOUD_RUN_REGION: asia-south1
  BACKEND_SERVICE_NAME: bestpg-backend
  FRONTEND_SERVICE_NAME: bestpg-dashboard # Assuming frontend also deploys to Cloud Run or Firebase under this project

jobs:
  quality_assurance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' # Or your specific Python version

      - name: Install backend dependencies
        run: pip install -r src/backend/requirements.txt

      - name: Run backend linting and formatting
        run: |
          pip install ruff
          ruff check src/backend/
          ruff format src/backend/

      - name: Run backend unit tests
        run: |
          pip install pytest
          pytest src/backend/

      - name: Run backend integration tests
        run: pytest src/backend/tests/integration/

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Or your specific Node.js version

      - name: Install frontend dependencies
        run: npm install --prefix src/internal_dashboard/

      - name: Run frontend linting
        run: npm run lint --prefix src/internal_dashboard/

      - name: Run frontend unit tests
        run: npm test --prefix src/internal_dashboard/

  build:
    runs-on: ubuntu-latest
    needs: quality_assurance
    outputs:
      backend_image: ${{ steps.build_backend_image.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker

      - name: Build and push backend image
        id: build_backend_image
        run: |
          gcloud builds submit --tag gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE_NAME }}:latest src/backend
          echo "image=gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE_NAME }}:latest" >> "$GITHUB_OUTPUT"

      - name: Install frontend dependencies
        run: npm install --prefix src/internal_dashboard/

      - name: Build frontend application
        run: npm run build --prefix src/internal_dashboard/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      backend_url: ${{ steps.deploy_backend_service.outputs.url }}
      frontend_url: ${{ steps.deploy_frontend_app.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Deploy backend service
        id: deploy_backend_service
        run: |
          SERVICE_URL=$(gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }} \
            --image ${{ needs.build.outputs.backend_image }} \
            --platform managed \
            --region ${{ env.CLOUD_RUN_REGION }} \
            --allow-unauthenticated \
            --project=${{ env.PROJECT_ID }} \
            --format="value(status.url)")
          echo "url=$SERVICE_URL" >> "$GITHUB_OUTPUT"

      - name: Deploy frontend application (Firebase Hosting)
        id: deploy_frontend_app
        run: |
          npm install -g firebase-tools
          DEPLOY_OUTPUT=$(firebase deploy --project ${{ env.PROJECT_ID }} --only hosting)
          FRONTEND_URL=$(echo "$DEPLOY_OUTPUT" | grep "Hosting URL" | awk '{print $3}')
          echo "url=$FRONTEND_URL" >> "$GITHUB_OUTPUT"

  post_deploy_verification:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Smoke test backend
        run: |
          BACKEND_URL="${{ needs.deploy.outputs.backend_url }}"
          curl -f -s "$BACKEND_URL" || exit 1

      - name: Smoke test frontend
        run: |
          FRONTEND_URL="${{ needs.deploy.outputs.frontend_url }}"
          curl -f -s "$FRONTEND_URL" || exit 1